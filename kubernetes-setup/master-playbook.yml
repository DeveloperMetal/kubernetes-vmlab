---
- hosts: all
  become: true
  tasks:
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common

  - name: Add external authorized key to manage master
    authorized_key:
      user: vagrant
      state: present
      key: "{{ lookup('file', '../authorized_key.pub') }}"

  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ image_code }} stable
      state: present

  - name: Install docker and its dependecies
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce 
      - docker-ce-cli 
      - containerd.io
    notify:
      - docker status

  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker

    # kubelet won't start with a swap file present
  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Change cgroup driver to systemd
    template:
      src: templates/docker_daemon.json
      dest: /etc/docker/daemon.json
      owner: root
      group: root
      mode: '0644'

  - name: Reload Docker
    service:
      name: docker
      state: reloaded

    # Install kubelet, kubeadm and kubectl
  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet 
        - kubeadm 
        - kubectl

  - name: Configure node ip
    lineinfile:
      state: present
      create: yes
      path: /etc/default/kubelet
      line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}

    # Cluster init with kubeadm for master only
  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted

  - name: Initialize the Kubernetes cluster using kubeadm
    command: kubeadm init --apiserver-advertise-address="192.168.30.100" --apiserver-cert-extra-sans="192.168.50.10"  --node-name master --pod-network-cidr=192.168.0.0/16

    # kube config file for the vagrant user to access the cluster
  - name: Create .kube config path for vagrant user
    file:
      owner: vagrant
      group: vagrant
      path: /home/vagrant/.kube
      state: directory

  - name: Copy kubernetes admin.conf to /home/vagrant/.kube
    copy:
      force: no
      remote_src: yes
      src: /etc/kubernetes/admin.conf
      dest: /home/vagrant/.kube/config
      owner: vagrant
      group: vagrant

  - name: Download calico installation yaml
    get_url:
      url: https://docs.projectcalico.org/v3.10/getting-started/kubernetes/installation/hosted/calico.yaml
      dest: /home/vagrant/calico-install.yaml
      owner: vagrant
      group: vagrant

    # Calico networking provider and network policy
  - name: Install calico pod network
    become: false
    command: kubectl create -f /home/vagrant/calico-install.yaml

    # generates kube join command for joining the node to the kubernetes avi_cluster
    # The command is stored in a file named join-command
  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command

  - name: Copy join command to local file
    become: false
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"

  handlers:
    # check docker daemon handler
    - name: docker status
      service: name=docker state=started
